openapi: 3.0.3
info:
  title: EduPlug API
  description: |-
    EduPlug API provides user authentication, post creation, comments, and notifications for an educational platform. 
    Use this API to register, log in, manage posts, and more.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: user
    description: User-related operations
  - name: post
    description: Post management operations
  - name: comment  
    description: Comment-related operations
  - name: notification
    description: Notification-related operations

paths:
  /api/v1/users/signup:
    post:
      tags:
        - user
      summary: Register a new user
      description: Register a new user by providing necessary details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  example: John Doe
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
                role:
                  type: string
                  enum: [admin, contributor, user]
                  example: user
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered. Please check your email for verification.
        '400':
          description: Bad request - Invalid input or email/username already exists.
        '500':
          description: Server error.

  /api/v1/users/login:
    post:
      tags:
        - user
      summary: Log in a user
      description: Authenticate a user and return a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
        '404':
          description: Invalid login credentials

  /api/v1/posts:
    post:
      tags:
        - post
      summary: Create a new post
      description: Create a new post (only available for contributors and admins).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: My First Post
                content:
                  type: string
                  example: This is the content of my first post.
                tags:
                  type: array
                  items:
                    type: string
                  example: [education, tech]
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: Forbidden - Only contributors or admins can create posts.

  /api/v1/posts:
    get:
      tags:
        - post
      summary: Get posts with pagination
      description: Fetch all posts with pagination.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          default: 1
        - in: query
          name: limit
          schema:
            type: integer
          default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 5
                  totalPosts:
                    type: integer
                    example: 50
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'

  /api/v1/posts/{id}:
    delete:
      tags:
        - post
      summary: Delete a post
      description: Deletes a post by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
        '404':
          description: Post not found
        '403':
          description: Unauthorized - Only the author or admin can delete posts.

  /api/v1/comments/{id}:
    post:
      tags:
        - comment
      summary: Add a comment to a post
      description: Add a comment to a specific post.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: This is a comment.
      responses:
        '201':
          description: Comment added successfully
        '404':
          description: Post not found

  /api/v1/notifications:
    get:
      tags:
        - notification
      summary: Get notifications for a user
      description: Get all notifications for the logged-in user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notifications fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

components:
  schemas:
    Post:
      type: object
      properties:
        _id:
          type: string
          example: 5f8d0d55b54764421b7156c1
        title:
          type: string
          example: My First Post
        content:
          type: string
          example: This is the content of my first post.
        author:
          type: string
          example: 5f8d0d55b54764421b7156c0
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          example: 2021-09-01T00:00:00Z

    Notification:
      type: object
      properties:
        _id:
          type: string
          example: 5f8d0d55b54764421b7156c3
        message:
          type: string
          example: You have a new comment on your post.
        isRead:
          type: boolean
          example: false
        createdAt:
          type: string
          example: 2021-09-01T00:00:00Z

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

